/Users/tea/Documents/Passion-Projects/movie_recommender/.venv/lib/python3.13/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/Users/tea/Documents/Passion-Projects/movie_recommender/.venv/lib/python3.13/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Matrix too small for SVD
SVD model unavailable, falling back to item-based CF


╔════════════════════════════════════════════════════════════════════╗
║                                                                    ║
║               EMBEDDING-BASED RECOMMENDATIONS - SETUP              ║
║                                                                    ║
╚════════════════════════════════════════════════════════════════════╝

📅 Started: 2025-10-04 16:55:57

======================================================================
  STEP 1: CHECKING DEPENDENCIES
======================================================================

✅ All deep learning dependencies installed!

📦 Versions:
   PyTorch: 2.8.0
   Torchvision: 0.23.0

🖥️  Using CPU
   → Consider using GPU for production (5-10x faster)
   → Install CUDA-enabled PyTorch for GPU support

======================================================================
  STEP 2: BUILDING EMBEDDING INDEX
======================================================================

📊 Building index for up to 2000 movies...
⏱️  This will take 3-5 minutes (first time downloads models)
💾 Embeddings will be cached for fast subsequent use

🔄 Starting build...

✅ Index built successfully in 0.1 seconds!

📊 Index Metrics:
   Total movies in database: 210
   Movies in embedding index: 210
   Coverage: 100.0%
   Movies with posters: 210
   Poster coverage: 100.0%
   Text embedding dimension: 384
   Image embedding dimension: 2048
   Device: cpu

======================================================================
  STEP 3: TESTING RECOMMENDATIONS
======================================================================

👤 Testing with user: secret

🔄 Generating embedding-based recommendations...
✅ Generated 10 recommendations in 1296ms

🎬 Top 5 Recommendations:
   1. Demon Slayer -Kimetsu no Yaiba- The Movie: Mugen Train (8.21/10)
   2. Maa (6.679/10)
   3. Ne Zha (7.897/10)
   4. KPop Demon Hunters (8.273/10)
   5. Bring Her Back (7.421/10)

🔄 Testing hybrid recommendations with embeddings...
✅ Generated 10 hybrid recommendations in 1339ms

======================================================================
  STEP 4: ENABLING IN API
======================================================================

✅ Embeddings are already enabled in the API!

📝 Usage:

   REST API:
   curl "http://localhost:8000/movies/recommendations?user_id=1&limit=10&use_embeddings=true" \
     -H "Authorization: Bearer $TOKEN"

   Python:
   recommendations = recommender.get_hybrid_recommendations(
       user_id=1,
       n_recommendations=10,
       use_embeddings=True  # Enable embeddings
   )

   JavaScript (Frontend):
   const response = await fetch(
     `/movies/recommendations?user_id=${userId}&limit=10&use_embeddings=true`,
     { headers: { 'Authorization': `Bearer ${token}` } }
   );

======================================================================
  STEP 5: MONITORING & PERFORMANCE
======================================================================

📊 Recommended Metrics to Track:

   1. Recommendation Latency:
      - Target: < 100ms (warm cache)
      - Monitor P95 and P99 latencies

   2. Embedding Quality:
      - Coverage: % of movies in index
      - Cache hit rate: > 95%

   3. User Engagement:
      - Click-through rate on recommendations
      - Time spent browsing
      - Conversion rate (watched vs recommended)

   4. Business Metrics:
      - User satisfaction ratings
      - Return user rate
      - A/B test: embeddings vs baseline

🔧 Performance Monitoring Script:

   python3 << EOF
   from backend.ml.embedding_recommender import EmbeddingRecommender
   from backend.database import SessionLocal
   import time

   db = SessionLocal()
   rec = EmbeddingRecommender(db)

   # Check metrics
   metrics = rec.get_embedding_quality_metrics()
   print(f"Coverage: {metrics['coverage']}")
   print(f"Device: {metrics['device']}")

   # Test speed
   from backend.ml.recommender import MovieRecommender
   recommender = MovieRecommender(db)
   start = time.time()
   recs = recommender.get_embedding_recommendations(user_id=1, n_recommendations=10)
   elapsed = (time.time() - start) * 1000
   print(f"Recommendation time: {elapsed:.0f}ms")
   EOF

======================================================================
  STEP 6: PRODUCTION RECOMMENDATIONS
======================================================================

🚀 For Production Deployment:

   1. GPU Acceleration (5-10x faster):
      - Install CUDA-enabled PyTorch
      - Use GPU instance (AWS p3, GCP with GPU)
      - Monitor GPU utilization

   2. Pre-build Index on Startup:
      - Add to backend/main.py startup event
      - Build index before accepting requests
      - Use persistent cache directory

   3. Scheduled Index Rebuilds:
      - Rebuild every 6-12 hours
      - Use background task/cron job
      - Monitor for new movies

   4. Caching Strategy:
      - Cache embeddings to disk (already implemented)
      - Use Redis for user embedding cache
      - Set cache TTL appropriately

   5. Load Balancing:
      - Each instance builds its own cache
      - OR share cache via network storage
      - Monitor memory usage per instance

   6. Monitoring & Alerting:
      - Track recommendation latency
      - Alert if latency > 200ms
      - Monitor embedding cache hit rate
      - Track GPU utilization (if using GPU)

   7. A/B Testing:
      - Compare embeddings vs baseline
      - Measure CTR, engagement, satisfaction
      - Gradually roll out to 100%

   8. Fallback Strategy:
      - Always have fallback to SVD
      - Handle embedding failures gracefully
      - Log errors for debugging

======================================================================
  ✅ SETUP COMPLETE!
======================================================================

🎉 Embedding-based recommendations are ready!

📚 Next Steps:
   1. Start your API: uvicorn backend.main:app --reload
   2. Test endpoint: curl .../recommendations?use_embeddings=true
   3. Monitor performance: Track latency and engagement
   4. Read docs: backend/EMBEDDING_RECOMMENDATIONS.md

🔗 Documentation:
   - Quick Setup: backend/EMBEDDING_SETUP.md
   - Full Guide: backend/EMBEDDING_RECOMMENDATIONS.md
   - Summary: backend/EMBEDDING_SUMMARY.md
   - Overview: EMBEDDING_README.md

📅 Completed: 2025-10-04 16:56:06

